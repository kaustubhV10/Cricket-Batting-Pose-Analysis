{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPE9L7pLPN6rGstLnsjqu5x"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "!pip install mediapipe opencv-python yt-dlp numpy matplotlib reportlab"
      ],
      "metadata": {
        "id": "uCYegH2KRo4o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import sys\n",
        "import math\n",
        "import time\n",
        "import json\n",
        "import argparse\n",
        "import tempfile\n",
        "from collections import deque, defaultdict\n",
        "from datetime import datetime\n",
        "import argparse\n",
        "import yt_dlp\n",
        "\n",
        "# Third-party libs: ensure installed\n",
        "try:\n",
        "    import cv2\n",
        "    import numpy as np\n",
        "    import mediapipe as mp\n",
        "    import matplotlib.pyplot as plt\n",
        "    from reportlab.lib.pagesizes import A4\n",
        "    from reportlab.pdfgen import canvas\n",
        "except Exception as e:\n",
        "    print(\"Missing dependencies. Please install requirements: mediapipe, opencv-python, yt-dlp, numpy, matplotlib, reportlab\")\n",
        "    raise e"
      ],
      "metadata": {
        "id": "85Nqw6UUePiu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "TH = {\n",
        "    \"elbow_good_min\": 100,\n",
        "    \"elbow_good_max\": 130,\n",
        "    \"head_knee_dx_max\": 0.07,\n",
        "    \"foot_angle_min\": 70,\n",
        "    \"foot_angle_max\": 110,\n",
        "    \"spine_lean_max\": 25,\n",
        "    \"contact_angle_delta\": 15,\n",
        "    \"wrist_speed_peak\": 0.02,\n",
        "    \"min_detected_frames_for_plots\": 5\n",
        "}"
      ],
      "metadata": {
        "id": "XPMsrM2XybaX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def angle_abc(a, b, c):\n",
        "    if a is None or b is None or c is None:\n",
        "        return None\n",
        "    ax, ay = a; bx, by = b; cx, cy = c\n",
        "    v1 = (ax - bx, ay - by)\n",
        "    v2 = (cx - bx, cy - by)\n",
        "    n1 = math.hypot(*v1); n2 = math.hypot(*v2)\n",
        "    if n1 == 0 or n2 == 0:\n",
        "        return None\n",
        "    dot = v1[0]*v2[0] + v1[1]*v2[1]\n",
        "    cosang = max(-1.0, min(1.0, dot/(n1*n2)))\n",
        "    return math.degrees(math.acos(cosang))"
      ],
      "metadata": {
        "id": "oDOJOmMVRqp_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def angle_vs_x(p1, p2):\n",
        "    if p1 is None or p2 is None:\n",
        "        return None\n",
        "    dx = p2[0] - p1[0]; dy = p2[1] - p1[1]\n",
        "    if dx == 0 and dy == 0:\n",
        "        return None\n",
        "    return math.degrees(math.atan2(dy, dx))"
      ],
      "metadata": {
        "id": "U6PkCox-TJN3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def ema(prev, new, alpha=0.25):\n",
        "    if new is None:\n",
        "        return prev\n",
        "    if prev is None:\n",
        "        return new\n",
        "    return alpha*new + (1-alpha)*prev"
      ],
      "metadata": {
        "id": "-ZoaYBvnTUcZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def detect_contact(prev_angle, curr_angle):\n",
        "    \"\"\"Detect contact moment based on a sudden change in elbow angle.\"\"\"\n",
        "    if prev_angle is None or curr_angle is None:\n",
        "        return False\n",
        "    return abs(curr_angle - prev_angle) > 15"
      ],
      "metadata": {
        "id": "M2QQr71-Tg1n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def safe_get_landmark(lm, idx):\n",
        "    try:\n",
        "        p = lm[idx]\n",
        "        if hasattr(p, 'visibility') and p.visibility < 0.25:\n",
        "            return None\n",
        "        return (p.x, p.y)\n",
        "    except Exception:\n",
        "        return None"
      ],
      "metadata": {
        "id": "PyFWe-paUm6Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def download_youtube(url, output_path):\n",
        "    \"\"\"Download video from YouTube to a given path.\"\"\"\n",
        "    ydl_opts = {\n",
        "        'format': 'best[ext=mp4]',\n",
        "        'outtmpl': output_path,\n",
        "        'quiet': False,\n",
        "        'noplaylist': True\n",
        "    }\n",
        "    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n",
        "        ydl.download([url])"
      ],
      "metadata": {
        "id": "Hy4qqkz40YCB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def analyze_video(input_path: str,\n",
        "                  output_dir: str = \"output\",\n",
        "                  target_width: int = 960,\n",
        "                  model_complexity: int = 1,\n",
        "                  debug_verbose: bool = False,\n",
        "                  reference_config: str = None):\n",
        "    os.makedirs(output_dir, exist_ok=True)\n",
        "    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
        "    annotated_path = os.path.join(output_dir, f\"annotated_{timestamp}.mp4\")\n",
        "    eval_path = os.path.join(output_dir, f\"evaluation_{timestamp}.json\")\n",
        "    chart_path = os.path.join(output_dir, f\"angles_{timestamp}.png\")\n",
        "    bat_path_json = os.path.join(output_dir, f\"bat_path_{timestamp}.json\")\n",
        "    report_pdf = os.path.join(output_dir, f\"report_{timestamp}.pdf\")\n",
        "    phase_json = os.path.join(output_dir, f\"phases_{timestamp}.json\")\n",
        "\n",
        "    # Reference config if provided\n",
        "    ref_cfg = None\n",
        "    if reference_config and os.path.exists(reference_config):\n",
        "        with open(reference_config, \"r\") as f:\n",
        "            ref_cfg = json.load(f)\n",
        "\n",
        "    # Open video\n",
        "    cap = cv2.VideoCapture(input_path)\n",
        "    if not cap.isOpened():\n",
        "        raise FileNotFoundError(f\"Cannot open {input_path}\")\n",
        "\n",
        "    in_w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
        "    in_h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
        "    in_fps = cap.get(cv2.CAP_PROP_FPS) or 25.0\n",
        "\n",
        "    # Resize width if requested\n",
        "    if target_width and target_width > 0:\n",
        "        scale = target_width / in_w\n",
        "        out_w = int(target_width)\n",
        "        out_h = max(1, int(in_h * scale))\n",
        "    else:\n",
        "        out_w, out_h = in_w, in_h\n",
        "\n",
        "    fourcc = cv2.VideoWriter_fourcc(*'mp4v')\n",
        "    writer = cv2.VideoWriter(annotated_path, fourcc, in_fps, (out_w, out_h))\n",
        "\n",
        "    # MediaPipe Pose\n",
        "    mp_pose = mp.solutions.pose\n",
        "    mp_draw = mp.solutions.drawing_utils\n",
        "    pose = mp_pose.Pose(model_complexity=model_complexity, min_detection_confidence=0.4, min_tracking_confidence=0.4)\n",
        "\n",
        "    # Rolling state\n",
        "    elbow_sm = None\n",
        "    spine_sm = None\n",
        "    headknee_sm = None\n",
        "    footdir_sm = None\n",
        "\n",
        "    sums = defaultdict(float)\n",
        "    counts = defaultdict(int)\n",
        "\n",
        "    frames = 0\n",
        "    written = 0\n",
        "    detected = 0\n",
        "\n",
        "    elbow_series = []\n",
        "    spine_series = []\n",
        "    head_over_knee_series = []\n",
        "    foot_dir_series = []\n",
        "\n",
        "    # For phase segmentation & contact detection\n",
        "    wrist_prev = None\n",
        "    wrist_prev_px = None\n",
        "    prev_elbow = None\n",
        "    wrist_speed_buf = deque(maxlen=7)\n",
        "    phase = \"Stance\"\n",
        "    phases = []\n",
        "    contact_frames = []\n",
        "    bat_path = []\n",
        "\n",
        "    start_time = time.time()\n",
        "\n",
        "    # Process frames\n",
        "    while True:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "        frames += 1\n",
        "\n",
        "        # resize for speed\n",
        "        if (out_w, out_h) != (in_w, in_h):\n",
        "            frame = cv2.resize(frame, (out_w, out_h), interpolation=cv2.INTER_AREA)\n",
        "\n",
        "        # MediaPipe expects RGB\n",
        "        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n",
        "        results = pose.process(rgb)\n",
        "\n",
        "        # Draw skeleton if available\n",
        "        if results.pose_landmarks:\n",
        "            detected += 1\n",
        "            mp_draw.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)\n",
        "            lm = results.pose_landmarks.landmark\n",
        "\n",
        "            # Extract key normalized points (x,y) or None\n",
        "            nose = safe_get_landmark(lm, mp_pose.PoseLandmark.NOSE.value)\n",
        "            l_sh = safe_get_landmark(lm, mp_pose.PoseLandmark.LEFT_SHOULDER.value)\n",
        "            r_sh = safe_get_landmark(lm, mp_pose.PoseLandmark.RIGHT_SHOULDER.value)\n",
        "            l_el = safe_get_landmark(lm, mp_pose.PoseLandmark.LEFT_ELBOW.value)\n",
        "            r_el = safe_get_landmark(lm, mp_pose.PoseLandmark.RIGHT_ELBOW.value)\n",
        "            l_wr = safe_get_landmark(lm, mp_pose.PoseLandmark.LEFT_WRIST.value)\n",
        "            r_wr = safe_get_landmark(lm, mp_pose.PoseLandmark.RIGHT_WRIST.value)\n",
        "            l_hip = safe_get_landmark(lm, mp_pose.PoseLandmark.LEFT_HIP.value)\n",
        "            r_hip = safe_get_landmark(lm, mp_pose.PoseLandmark.RIGHT_HIP.value)\n",
        "            l_knee = safe_get_landmark(lm, mp_pose.PoseLandmark.LEFT_KNEE.value)\n",
        "            r_knee = safe_get_landmark(lm, mp_pose.PoseLandmark.RIGHT_KNEE.value)\n",
        "            l_ank = safe_get_landmark(lm, mp_pose.PoseLandmark.LEFT_ANKLE.value)\n",
        "            r_ank = safe_get_landmark(lm, mp_pose.PoseLandmark.RIGHT_ANKLE.value)\n",
        "            l_toe = safe_get_landmark(lm, mp_pose.PoseLandmark.LEFT_FOOT_INDEX.value)\n",
        "            r_toe = safe_get_landmark(lm, mp_pose.PoseLandmark.RIGHT_FOOT_INDEX.value)\n",
        "\n",
        "            # Decide front arm/leg heuristics: front = the wrist with larger y (closer to bottom)\n",
        "            front_is_left = False\n",
        "            if l_wr and r_wr:\n",
        "                front_is_left = l_wr[1] > r_wr[1]\n",
        "            elif l_wr:\n",
        "                front_is_left = True\n",
        "            elif r_wr:\n",
        "                front_is_left = False\n",
        "\n",
        "            # Choose front landmarks\n",
        "            front_el = l_el if front_is_left else r_el\n",
        "            front_wr = l_wr if front_is_left else r_wr\n",
        "            front_sh = l_sh if front_is_left else r_sh\n",
        "            front_hip = l_hip if front_is_left else r_hip\n",
        "            front_knee = l_knee if front_is_left else r_knee\n",
        "            front_ank = l_ank if front_is_left else r_ank\n",
        "            front_toe = l_toe if front_is_left else r_toe\n",
        "\n",
        "            # Compute metrics (normalized)\n",
        "            elbow_deg = angle_abc(front_sh, front_el, front_wr) if front_sh and front_el and front_wr else None\n",
        "            shoulder_c = None\n",
        "            hip_c = None\n",
        "            if l_sh and r_sh:\n",
        "                shoulder_c = ((l_sh[0] + r_sh[0]) / 2.0, (l_sh[1] + r_sh[1]) / 2.0)\n",
        "            else:\n",
        "                shoulder_c = l_sh or r_sh\n",
        "            if l_hip and r_hip:\n",
        "                hip_c = ((l_hip[0] + r_hip[0]) / 2.0, (l_hip[1] + r_hip[1]) / 2.0)\n",
        "            else:\n",
        "                hip_c = l_hip or r_hip\n",
        "            spine_lean = None\n",
        "            if shoulder_c and hip_c:\n",
        "                spine_vec = (shoulder_c[0] - hip_c[0], shoulder_c[1] - hip_c[1])\n",
        "                # vertical vector (0,-1) in image coords\n",
        "                vvert = (0.0, -1.0)\n",
        "                spine_lean = angle_between(spine_vec, vvert) if 'angle_between' in globals() else None\n",
        "                # fallback compute via angle_abc: create a virtual point vertically above hip\n",
        "                if spine_lean is None:\n",
        "                    spine_lean = angle_abc((hip_c[0], hip_c[1]-1.0), hip_c, shoulder_c)\n",
        "\n",
        "            head_over_knee_dx = None\n",
        "            if nose and front_knee:\n",
        "                head_over_knee_dx = abs(nose[0] - front_knee[0])\n",
        "\n",
        "            foot_dir_deg = None\n",
        "            if front_ank and front_toe:\n",
        "                foot_dir_deg = angle_vs_x(front_ank, front_toe)  # degrees\n",
        "\n",
        "            # Smooth metrics via EMA for stable overlay\n",
        "            elbow_sm = ema(elbow_sm, elbow_deg)\n",
        "            spine_sm = ema(spine_sm, spine_lean)\n",
        "            headknee_sm = ema(headknee_sm, head_over_knee_dx)\n",
        "            footdir_sm = ema(footdir_sm, foot_dir_deg)\n",
        "\n",
        "            # Accumulate for averages\n",
        "            for k, v in [(\"elbow\", elbow_deg), (\"spine\", spine_lean), (\"head_dx\", head_over_knee_dx), (\"foot_dir\", foot_dir_deg)]:\n",
        "                if v is not None:\n",
        "                    sums[k] += v\n",
        "                    counts[k] += 1\n",
        "\n",
        "            # Append to timeseries\n",
        "            elbow_series.append(elbow_deg if elbow_deg is not None else np.nan)\n",
        "            spine_series.append(spine_lean if spine_lean is not None else np.nan)\n",
        "            head_over_knee_series.append(head_over_knee_dx if head_over_knee_dx is not None else np.nan)\n",
        "            foot_dir_series.append(foot_dir_deg if foot_dir_deg is not None else np.nan)\n",
        "\n",
        "            # Live overlay metrics\n",
        "            y0 = 30\n",
        "            def put(t, y):\n",
        "                cv2.putText(frame, t, (10, y), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,0), 2, cv2.LINE_AA)\n",
        "            put(f\"Elbow: {int(elbow_sm) if elbow_sm else '--'} deg\", y0)\n",
        "            put(f\"Spine lean: {int(spine_sm) if spine_sm else '--'} deg\", y0+22)\n",
        "            put(f\"Head-Knee dx: {headknee_sm:.3f}\" if headknee_sm else \"Head-Knee dx: --\", y0+44)\n",
        "            put(f\"Foot dir: {int(footdir_sm) if footdir_sm else '--'} deg\", y0+66)\n",
        "\n",
        "            # Threshold cues\n",
        "            cues = []\n",
        "            if elbow_sm is not None:\n",
        "                cues.append(\"Good elbow\" if TH[\"elbow_good_min\"] <= elbow_sm <= TH[\"elbow_good_max\"] else \"Elbow\")\n",
        "            if spine_sm is not None:\n",
        "                cues.append(\"Upright spine\" if spine_sm <= TH[\"spine_lean_max\"] else \"Lean\")\n",
        "            if headknee_sm is not None:\n",
        "                cues.append(\"Head over knee\" if headknee_sm <= TH[\"head_knee_dx_max\"] else \"Head not over knee\")\n",
        "            if footdir_sm is not None:\n",
        "                fd_ok = abs(footdir_sm) <= 45 or (TH[\"foot_angle_min\"] <= footdir_sm <= TH[\"foot_angle_max\"])\n",
        "                cues.append(\"Foot ok\" if fd_ok else \"Foot\")\n",
        "            for i, c in enumerate(cues):\n",
        "                cv2.putText(frame, c, (10, y0+110 + i*20),\n",
        "                cv2.FONT_HERSHEY_SIMPLEX, 0.6,\n",
        "                (0, 200, 0), 2, cv2.LINE_AA)  # Always green\n",
        "\n",
        "\n",
        "            # Simple scoring increments (will be normalized later)\n",
        "            if elbow_deg is not None and TH[\"elbow_good_min\"] <= elbow_deg <= TH[\"elbow_good_max\"]:\n",
        "                sums['swing_ok'] += 1\n",
        "            if head_over_knee_dx is not None and head_over_knee_dx <= TH[\"head_knee_dx_max\"]:\n",
        "                sums['head_ok'] += 1\n",
        "            if foot_dir_deg is not None and TH[\"foot_angle_min\"] <= abs(foot_dir_deg) <= TH[\"foot_angle_max\"]:\n",
        "                sums['foot_ok'] += 1\n",
        "            if spine_lean is not None and spine_lean <= TH[\"spine_lean_max\"]:\n",
        "                sums['balance_ok'] += 1\n",
        "\n",
        "            if front_wr:\n",
        "                wrist_px = (int(front_wr[0]*out_w), int(front_wr[1]*out_h))\n",
        "                if wrist_prev_px is not None:\n",
        "                    dx = wrist_px[0] - wrist_prev_px[0]\n",
        "                    dy = wrist_px[1] - wrist_prev_px[1]\n",
        "                    speed = math.hypot(dx, dy) / max(1, 1.0)  # pixels per frame\n",
        "                else:\n",
        "                    speed = 0.0\n",
        "                wrist_speed_buf.append(speed)\n",
        "                wrist_prev_px = wrist_px\n",
        "                bat_path.append({\"frame\": frames, \"x\": wrist_px[0], \"y\": wrist_px[1]})\n",
        "            else:\n",
        "                speed = 0.0\n",
        "                wrist_prev_px = None\n",
        "\n",
        "            mean_speed = float(np.mean(wrist_speed_buf)) if len(wrist_speed_buf) > 0 else 0.0\n",
        "            if phase == \"Stance\":\n",
        "                if mean_speed > 2.0:\n",
        "                    phase = \"Stride\"\n",
        "            elif phase == \"Stride\":\n",
        "                if mean_speed > 6.0:\n",
        "                    phase = \"Downswing\"\n",
        "            elif phase == \"Downswing\":\n",
        "                # impact detection via elbow delta or wrist peak\n",
        "                if prev_elbow is not None and elbow_deg is not None and abs(elbow_deg - prev_elbow) > TH[\"contact_angle_delta\"]:\n",
        "                    phase = \"Impact\"\n",
        "                elif mean_speed < 3.0 and len(wrist_speed_buf) >= wrist_speed_buf.maxlen and wrist_speed_buf[len(wrist_speed_buf)//2] == max(wrist_speed_buf):\n",
        "                    phase = \"Impact\"\n",
        "            elif phase == \"Impact\":\n",
        "                if mean_speed < 5.0:\n",
        "                    phase = \"Follow-through\"\n",
        "            elif phase == \"Follow-through\":\n",
        "                if mean_speed < 1.0:\n",
        "                    phase = \"Recovery\"\n",
        "            phases.append({\"frame\": frames, \"phase\": phase})\n",
        "            put(f\"Phase: {phase}\", y0+170)\n",
        "\n",
        "            # Contact detection (mark frame)\n",
        "            if prev_elbow is not None and elbow_deg is not None:\n",
        "                if abs(elbow_deg - prev_elbow) > TH[\"contact_angle_delta\"]:\n",
        "                    contact_frames.append(frames)\n",
        "                    cv2.putText(frame, \"Contact detected\", (10, y0+200), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0,200,255), 2)\n",
        "\n",
        "            prev_elbow = elbow_deg\n",
        "\n",
        "            try:\n",
        "                # create small ROI around wrist\n",
        "                if front_wr:\n",
        "                    x = int(front_wr[0]*out_w); y = int(front_wr[1]*out_h)\n",
        "                    w_roi = 160; h_roi = 160\n",
        "                    x0 = max(0, x - w_roi//2); y0 = max(0, y - h_roi//2)\n",
        "                    x1 = min(out_w, x0 + w_roi); y1 = min(out_h, y0 + h_roi)\n",
        "                    roi = frame[y0:y1, x0:x1]\n",
        "                    gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)\n",
        "                    edges = cv2.Canny(gray, 50, 150)\n",
        "                    lines = cv2.HoughLinesP(edges, 1, math.pi/180, threshold=25, minLineLength=30, maxLineGap=10)\n",
        "                    if lines is not None:\n",
        "                        # find longest line\n",
        "                        longest = max(lines, key=lambda l: math.hypot(l[0][2]-l[0][0], l[0][3]-l[0][1]))\n",
        "                        xA,yA,xB,yB = longest[0]\n",
        "                        # draw relative to frame\n",
        "                        cv2.line(frame, (x0+xA, y0+yA), (x0+xB, y0+yB), (0,255,255), 2)\n",
        "                        bat_ang = math.degrees(math.atan2((y0+yB)-(y0+yA), (x0+xB)-(x0+xA)))\n",
        "                        cv2.putText(frame, f\"Bat angle: {int(bat_ang)}\", (10, y0+230), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,255), 2)\n",
        "            except Exception:\n",
        "                pass\n",
        "\n",
        "        else:\n",
        "            elbow_series.append(np.nan)\n",
        "            spine_series.append(np.nan)\n",
        "            head_over_knee_series.append(np.nan)\n",
        "            foot_dir_series.append(np.nan)\n",
        "            phases.append({\"frame\": frames, \"phase\": \"No detection\"})\n",
        "            cv2.putText(frame, \"Missing landmarks\", (10,30), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,255,255), 2)\n",
        "\n",
        "        writer.write(frame)\n",
        "        written += 1\n",
        "\n",
        "        if debug_verbose and frames % 200 == 0:\n",
        "            print(f\"[Progress] Frame {frames} written, detections so far: {detected}\")\n",
        "\n",
        "    # end processing loop\n",
        "    cap.release()\n",
        "    writer.release()\n",
        "    pose.close()\n",
        "\n",
        "    elapsed = time.time() - start_time\n",
        "    avg_fps = written / elapsed if elapsed > 0 else 0.0\n",
        "\n",
        "    # Post-processing: compute averages and scores\n",
        "    avgs = {}\n",
        "    for k in ['elbow', 'spine', 'head_dx', 'foot_dir']:\n",
        "        avgs[k] = (sums[k] / counts[k]) if counts[k] > 0 else None\n",
        "\n",
        "    # Map counts to 1-10 scores\n",
        "    def count_to_score(val_count, total_detected):\n",
        "        if total_detected <= 0:\n",
        "            return 1.0\n",
        "        frac = val_count / total_detected\n",
        "        return round(1.0 + frac * 9.0, 2)\n",
        "\n",
        "    scores = {\n",
        "        \"Footwork\": count_to_score(sums['foot_ok'], detected),\n",
        "        \"Head Position\": count_to_score(sums['head_ok'], detected),\n",
        "        \"Swing Control\": count_to_score(sums['swing_ok'], detected),\n",
        "        \"Balance\": count_to_score(sums['balance_ok'], detected),\n",
        "        \"Follow-through\": count_to_score(sums.get('follow_ok', 0), detected)\n",
        "    }\n",
        "\n",
        "    # Skill grade\n",
        "    mean_score = np.mean(list(scores.values()))\n",
        "    if mean_score >= 8.0:\n",
        "        skill = \"Advanced\"\n",
        "    elif mean_score >= 5.5:\n",
        "        skill = \"Intermediate\"\n",
        "    else:\n",
        "        skill = \"Beginner\"\n",
        "\n",
        "    # Temporal smoothness metrics\n",
        "    elbow_valid = [v for v in elbow_series if not (v is None or np.isnan(v))]\n",
        "    spine_valid = [v for v in spine_series if not (v is None or np.isnan(v))]\n",
        "    smoothness = {\n",
        "        \"elbow_avg_delta\": float(np.mean(np.abs(np.diff(elbow_valid)))) if len(elbow_valid) > 2 else None,\n",
        "        \"spine_avg_delta\": float(np.mean(np.abs(np.diff(spine_valid)))) if len(spine_valid) > 2 else None\n",
        "    }\n",
        "\n",
        "    # Save time-series chart (elbow and spine)\n",
        "    valid_idx = [i for i, v in enumerate(elbow_series) if not (v is None or np.isnan(v))]\n",
        "    valid_elbow = [elbow_series[i] for i in valid_idx]\n",
        "    valid_spine = [spine_series[i] for i in valid_idx]\n",
        "    if len(valid_elbow) >= TH[\"min_detected_frames_for_plots\"]:\n",
        "        plt.figure(figsize=(10,4))\n",
        "        plt.plot(valid_idx, valid_elbow, label=\"Elbow angle (deg)\")\n",
        "        if len(valid_spine) >= 1:\n",
        "            plt.plot(valid_idx, [spine_series[i] for i in valid_idx], label=\"Spine lean (deg)\")\n",
        "        plt.xlabel(\"Frame index\")\n",
        "        plt.ylabel(\"Degrees\")\n",
        "        plt.title(\"Elbow & Spine angles over time\")\n",
        "        plt.legend()\n",
        "        plt.tight_layout()\n",
        "        plt.savefig(chart_path)\n",
        "        plt.close()\n",
        "    else:\n",
        "        chart_path = None\n",
        "\n",
        "    # Save bat path if any\n",
        "    if len(bat_path) > 0:\n",
        "        with open(bat_path_json, \"w\") as f:\n",
        "            json.dump(bat_path, f, indent=2)\n",
        "    else:\n",
        "        bat_path_json = None\n",
        "\n",
        "    # Save phases (consolidate)\n",
        "    with open(phase_json, \"w\") as f:\n",
        "        json.dump(phases, f, indent=2)\n",
        "\n",
        "    # Build evaluation dict\n",
        "    evaluation = {\n",
        "        \"input\": input_path,\n",
        "        \"annotated_video\": annotated_path,\n",
        "        \"frames_processed\": frames,\n",
        "        \"frames_written\": written,\n",
        "        \"frames_with_pose\": detected,\n",
        "        \"avg_fps\": round(avg_fps, 2),\n",
        "        \"averages\": avgs,\n",
        "        \"scores\": scores,\n",
        "        \"skill_grade\": skill,\n",
        "        \"smoothness\": smoothness,\n",
        "        \"contact_frames\": contact_frames,\n",
        "        \"phase_file\": phase_json,\n",
        "        \"chart\": chart_path,\n",
        "        \"bat_path\": bat_path_json\n",
        "    }\n",
        "\n",
        "    # Reference comparison\n",
        "    if ref_cfg:\n",
        "        ref_report = {}\n",
        "        if 'elbow_angle' in ref_cfg and avgs['elbow'] is not None:\n",
        "            minr = ref_cfg['elbow_angle'].get('min'); maxr = ref_cfg['elbow_angle'].get('max')\n",
        "            ref_report['elbow_ok'] = (minr <= avgs['elbow'] <= maxr) if (minr is not None and maxr is not None) else None\n",
        "        evaluation['reference_comparison'] = ref_report\n",
        "\n",
        "    # Save evaluation json\n",
        "    with open(eval_path, \"w\") as f:\n",
        "        json.dump(evaluation, f, indent=2)\n",
        "\n",
        "    # Create a simple PDF report\n",
        "    try:\n",
        "        c = canvas.Canvas(report_pdf, pagesize=A4)\n",
        "        c.setFont(\"Helvetica\", 12)\n",
        "        c.drawString(40, 800, \"Cricket Cover Drive - Analysis Report\")\n",
        "        c.drawString(40, 780, f\"Input: {input_path}\")\n",
        "        c.drawString(40, 760, f\"Frames processed: {frames}, with pose: {detected}\")\n",
        "        c.drawString(40, 740, f\"Avg FPS: {evaluation['avg_fps']}\")\n",
        "        c.drawString(40, 720, f\"Skill Grade: {skill}\")\n",
        "        y = 700\n",
        "        c.drawString(40, y, \"Scores:\")\n",
        "        y -= 20\n",
        "        for k, v in scores.items():\n",
        "            c.drawString(60, y, f\"{k}: {v}/10\")\n",
        "            y -= 18\n",
        "        y -= 10\n",
        "        if chart_path:\n",
        "            c.drawImage(chart_path, 40, y-280, width=500, height=250)\n",
        "        c.save()\n",
        "    except Exception as e:\n",
        "        print(\"[Report] PDF generation failed:\", e)\n",
        "        report_pdf = None\n",
        "\n",
        "    print(\"[Done] Annotated video:\", annotated_path)\n",
        "    print(\"[Done] Evaluation JSON:\", eval_path)\n",
        "    if chart_path:\n",
        "        print(\"[Done] Chart:\", chart_path)\n",
        "    if bat_path_json:\n",
        "        print(\"[Done] Bat path:\", bat_path_json)\n",
        "    if contact_frames:\n",
        "        print(\"[Info] Contact frames detected:\", contact_frames)\n",
        "    print(\"[Info] Avg FPS:\", avg_fps)\n",
        "\n",
        "    return evaluation"
      ],
      "metadata": {
        "id": "72udwxXSehfA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def angle_between(v1, v2):\n",
        "    if v1 is None or v2 is None:\n",
        "        return None\n",
        "    n1 = math.hypot(*v1); n2 = math.hypot(*v2)\n",
        "    if n1 == 0 or n2 == 0:\n",
        "        return None\n",
        "    dot = v1[0]*v2[0] + v1[1]*v2[1]\n",
        "    cosang = max(-1.0, min(1.0, dot/(n1*n2)))\n",
        "    return math.degrees(math.acos(cosang))"
      ],
      "metadata": {
        "id": "Wot6K2QSekPW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def main():\n",
        "    url = \"https://youtube.com/shorts/vSX3IRxGnNY\"\n",
        "    input_path = None\n",
        "    output_dir = \"/content/output\"\n",
        "    width = 960\n",
        "    model_complexity = 1\n",
        "    reference = None\n",
        "    verbose = True\n",
        "\n",
        "\n",
        "    if url:\n",
        "        tmp = tempfile.mkdtemp(prefix=\"cricket_dl_\")\n",
        "        input_path = os.path.join(tmp, \"input.mp4\")\n",
        "        download_youtube(url, input_path)\n",
        "    elif input_path:\n",
        "        if not os.path.exists(input_path):\n",
        "            raise FileNotFoundError(f\"Input not found: {input_path}\")\n",
        "    else:\n",
        "        print(\"Error: Provide a YouTube URL or local input path\")\n",
        "        return\n",
        "\n",
        "    analyze_video(\n",
        "        input_path,\n",
        "        output_dir=output_dir,\n",
        "        target_width=width,\n",
        "        model_complexity=model_complexity,\n",
        "        debug_verbose=verbose,\n",
        "        reference_config=reference\n",
        "    )\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "dx2IHv12ettu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QzM4eWWu19O_"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}